diff --git a/Makefile b/Makefile
index f0beb51..2b6d236 100644
--- a/Makefile
+++ b/Makefile
@@ -1,4 +1,3 @@
-
 # To compile and run with a lab solution, set the lab name in lab.mk
 # (e.g., LB=util).  Run make grade to test solution with the lab's
 # grade script (e.g., grade-lab-util).
@@ -149,6 +148,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_trace\
+	$U/_sysinfotest\
 
 
 
diff --git a/gradelib.pyc b/gradelib.pyc
new file mode 100644
index 0000000..199999d
Binary files /dev/null and b/gradelib.pyc differ
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
index fa6a0ac..7c71125 100644
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -9,7 +9,7 @@
 #include "riscv.h"
 #include "defs.h"
 
-void freerange(void *pa_start, void *pa_end);
+void freerange(void *pa_start, void *pa_end);  
 
 extern char end[]; // first address after kernel.
                    // defined by kernel.ld.
@@ -57,7 +57,7 @@ kfree(void *pa)
   r = (struct run*)pa;
 
   acquire(&kmem.lock);
-  r->next = kmem.freelist;
+  r->next = kmem.freelist;  //添加当前内存块，到链表的头部
   kmem.freelist = r;
   release(&kmem.lock);
 }
@@ -80,3 +80,19 @@ kalloc(void)
     memset((char*)r, 5, PGSIZE); // fill with junk
   return (void*)r;
 }
+
+
+uint64 freebytes(void) //获取空闲的内存数
+{
+  uint64 bytes = 0;
+  struct run *p = kmem.freelist;
+
+  acquire(&kmem.lock);
+  while(p) {
+    bytes += PGSIZE;
+    p = p->next;
+  }
+  release(&kmem.lock);
+
+  return bytes;
+}
diff --git a/kernel/proc.c b/kernel/proc.c
index 6afafa1..1147831 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -197,15 +197,15 @@ proc_freepagetable(pagetable_t pagetable, uint64 sz)
 
 // a user program that calls exec("/init")
 // od -t xC initcode
+// 这段二进制代码对应的是initcode.S
 uchar initcode[] = {
-  0x17, 0x05, 0x00, 0x00, 0x13, 0x05, 0x45, 0x02,
-  0x97, 0x05, 0x00, 0x00, 0x93, 0x85, 0x35, 0x02,
-  0x93, 0x08, 0x70, 0x00, 0x73, 0x00, 0x00, 0x00,
-  0x93, 0x08, 0x20, 0x00, 0x73, 0x00, 0x00, 0x00,
-  0xef, 0xf0, 0x9f, 0xff, 0x2f, 0x69, 0x6e, 0x69,
-  0x74, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00,
-  0x00, 0x00, 0x00, 0x00
-};
+    0x17, 0x05, 0x00, 0x00, 0x13, 0x05, 0x45, 0x02,
+    0x97, 0x05, 0x00, 0x00, 0x93, 0x85, 0x35, 0x02,
+    0x93, 0x08, 0x70, 0x00, 0x73, 0x00, 0x00, 0x00,
+    0x93, 0x08, 0x20, 0x00, 0x73, 0x00, 0x00, 0x00,
+    0xef, 0xf0, 0x9f, 0xff, 0x2f, 0x69, 0x6e, 0x69,
+    0x74, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00};
 
 // Set up first user process.
 void
@@ -291,6 +291,9 @@ fork(void)
 
   safestrcpy(np->name, p->name, sizeof(p->name));
 
+  //将trace_mask拷贝到子进程
+  np->trace_mask = p->trace_mask;
+
   pid = np->pid;
 
   np->state = RUNNABLE;
@@ -693,3 +696,18 @@ procdump(void)
     printf("\n");
   }
 }
+
+// 获取进程数
+uint64
+procnum(void) {
+  int np = 0;
+  struct proc *p;
+  for(p = proc; p < &proc[NPROC]; ++p) {
+    // p->lock must be held when using state
+    acquire(&p->lock);
+    if(p->state != UNUSED) 
+      ++np;
+    release(&p->lock);
+  }
+  return np;
+}
diff --git a/kernel/proc.h b/kernel/proc.h
index 9c16ea7..3534244 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -103,4 +103,5 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int trace_mask;              // 用于实现trace的掩码
 };
diff --git a/kernel/start.c b/kernel/start.c
index 4eb6c2d..8210a4c 100644
--- a/kernel/start.c
+++ b/kernel/start.c
@@ -21,17 +21,17 @@ void
 start()
 {
   // set M Previous Privilege mode to Supervisor, for mret.
-  unsigned long x = r_mstatus();
-  x &= ~MSTATUS_MPP_MASK;
-  x |= MSTATUS_MPP_S;
-  w_mstatus(x);
+  unsigned long x = r_mstatus(); 
+  x &= ~MSTATUS_MPP_MASK;        
+  x |= MSTATUS_MPP_S;            
+  w_mstatus(x);                  
 
   // set M Exception Program Counter to main, for mret.
   // requires gcc -mcmodel=medany
-  w_mepc((uint64)main);
+  w_mepc((uint64)main); 
 
   // disable paging for now.
-  w_satp(0);
+  w_satp(0); 
 
   // delegate all interrupts and exceptions to supervisor mode.
   w_medeleg(0xffff);
@@ -46,7 +46,7 @@ start()
   w_tp(id);
 
   // switch to supervisor mode and jump to main().
-  asm volatile("mret");
+  asm volatile("mret"); 
 }
 
 // set up to receive timer interrupts in machine mode,
diff --git a/kernel/syscall.c b/kernel/syscall.c
index c1b3670..9cc6d33 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -104,6 +104,8 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_wait(void);
 extern uint64 sys_write(void);
 extern uint64 sys_uptime(void);
+extern uint64 sys_trace(void);
+extern uint64 sys_sysinfo(void);
 
 static uint64 (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -127,17 +129,47 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_trace]   sys_trace,
+[SYS_sysinfo] sys_sysinfo,
 };
 
-void
-syscall(void)
+const char *syscallname[] = {
+[SYS_fork]    "fork",
+[SYS_exit]    "exit",
+[SYS_wait]    "wait",
+[SYS_pipe]    "pipe",
+[SYS_read]    "read",
+[SYS_kill]    "kill",
+[SYS_exec]    "exec",
+[SYS_fstat]   "fstat",
+[SYS_chdir]   "chdir",
+[SYS_dup]     "dup",
+[SYS_getpid]  "getpid",
+[SYS_sbrk]    "sbrk",
+[SYS_sleep]   "sleep",
+[SYS_uptime]  "uptime",
+[SYS_open]    "open",
+[SYS_write]   "write",
+[SYS_mknod]   "mknod",
+[SYS_unlink]  "unlink",
+[SYS_link]    "link",
+[SYS_mkdir]   "mkdir",
+[SYS_close]   "close",
+[SYS_trace]   "trace",
+[SYS_sysinfo] "sysinfo",
+};
+
+void syscall(void)//syscall函数修改
 {
   int num;
   struct proc *p = myproc();
 
-  num = p->trapframe->a7;
-  if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
-    p->trapframe->a0 = syscalls[num]();
+  num = p->trapframe->a7; 
+  if(num > 0 && num < NELEM(syscalls) && syscalls[num]) 
+  {
+    p->trapframe->a0 = syscalls[num](); 
+    if ((1 << num) & (p->trace_mask))
+      printf("%d: syscall %s -> %d\n", p->pid, syscallname[num], p->trapframe->a0);
   } else {
     printf("%d %s: unknown sys call %d\n",
             p->pid, p->name, num);
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..5c0eaf4 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -1,22 +1,24 @@
 // System call numbers
-#define SYS_fork    1
-#define SYS_exit    2
-#define SYS_wait    3
-#define SYS_pipe    4
-#define SYS_read    5
-#define SYS_kill    6
-#define SYS_exec    7
-#define SYS_fstat   8
-#define SYS_chdir   9
-#define SYS_dup    10
-#define SYS_getpid 11
-#define SYS_sbrk   12
-#define SYS_sleep  13
-#define SYS_uptime 14
-#define SYS_open   15
-#define SYS_write  16
-#define SYS_mknod  17
-#define SYS_unlink 18
-#define SYS_link   19
-#define SYS_mkdir  20
-#define SYS_close  21
+#define SYS_fork     1
+#define SYS_exit     2
+#define SYS_wait     3
+#define SYS_pipe     4
+#define SYS_read     5
+#define SYS_kill     6
+#define SYS_exec     7
+#define SYS_fstat    8
+#define SYS_chdir    9
+#define SYS_dup     10
+#define SYS_getpid  11
+#define SYS_sbrk    12
+#define SYS_sleep   13
+#define SYS_uptime  14
+#define SYS_open    15
+#define SYS_write   16
+#define SYS_mknod   17
+#define SYS_unlink  18
+#define SYS_link    19
+#define SYS_mkdir   20
+#define SYS_close   21
+#define SYS_trace   22
+#define SYS_sysinfo 23
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index e8bcda9..573bc36 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -6,6 +6,7 @@
 #include "memlayout.h"
 #include "spinlock.h"
 #include "proc.h"
+#include "sysinfo.h"
 
 uint64
 sys_exit(void)
@@ -95,3 +96,28 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64 sys_trace(void) 
+{
+  // 检索系统调用的参数
+  argint(0, &(myproc()->trace_mask));
+  return 0;
+}
+
+extern uint64 freebytes(void);
+extern uint64 procnum(void);
+uint64 sys_sysinfo(void)
+{
+  struct sysinfo info;
+  info.freemem = freebytes();
+  info.nproc = procnum();
+
+  uint64 destaddr;
+  argaddr(0,&destaddr);
+
+  //拷贝函数，copy
+  if(copyout(myproc()->pagetable, destaddr, (char*)&info, sizeof info) < 0)
+    return -1;
+
+  return 0;
+}
diff --git a/kernel/vm.c b/kernel/vm.c
index bccb405..53f27b6 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -75,7 +75,7 @@ walk(pagetable_t pagetable, uint64 va, int alloc)
     panic("walk");
 
   for(int level = 2; level > 0; level--) {
-    pte_t *pte = &pagetable[PX(level, va)];
+    pte_t *pte = &pagetable[PX(level, va)]; 
     if(*pte & PTE_V) {
       pagetable = (pagetable_t)PTE2PA(*pte);
     } else {
diff --git a/time.txt b/time.txt
new file mode 100644
index 0000000..00750ed
--- /dev/null
+++ b/time.txt
@@ -0,0 +1 @@
+3
diff --git a/user/user.h b/user/user.h
index b71ecda..c0d7532 100644
--- a/user/user.h
+++ b/user/user.h
@@ -40,3 +40,8 @@ void free(void*);
 int atoi(const char*);
 int memcmp(const void *, const void *, uint);
 void *memcpy(void *, const void *, uint);
+
+int trace(int);
+struct sysinfo;
+int sysinfo(struct sysinfo *);
+
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..bc109fd 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("trace");
+entry("sysinfo");
