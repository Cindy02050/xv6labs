diff --git a/Makefile b/Makefile
index 0fbaf7c..b0019e6 100644
--- a/Makefile
+++ b/Makefile
@@ -36,7 +36,7 @@ OBJS = \
   $K/kernelvec.o \
   $K/plic.o \
   $K/virtio_disk.o \
-
+  
 ifeq ($(LAB),pgtbl)
 OBJS += $K/vmcopyin.o
 endif
@@ -149,7 +149,12 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
-
+	$U/_sleep\
+	$U/_pingpong\
+	$U/_primes\
+	$U/_find\
+	$U/_xargs\
+	
 
 ifeq ($(LAB),syscall)
 UPROGS += \
diff --git a/gradelib.pyc b/gradelib.pyc
new file mode 100644
index 0000000..199999d
Binary files /dev/null and b/gradelib.pyc differ
diff --git a/time.txt b/time.txt
new file mode 100644
index 0000000..1e8b314
--- /dev/null
+++ b/time.txt
@@ -0,0 +1 @@
+6
diff --git a/user/find.c b/user/find.c
new file mode 100644
index 0000000..d296385
--- /dev/null
+++ b/user/find.c
@@ -0,0 +1,69 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/fs.h"
+
+char* fmtname(char *path) {
+  static char buf[DIRSIZ + 1];
+  char *p;
+  for (p = path + strlen(path); p >= path && *p != '/';p--);
+  p++;
+  if (strlen(p) >= DIRSIZ) return p;
+  memmove(buf, p, strlen(p));
+  memset(buf+strlen(p), ' ', DIRSIZ-strlen(p));
+  buf[strlen(p)] = 0;
+  return buf;
+}
+
+void find(char *path, char *fileName) {
+  char buf[512], *p;
+  int fd;
+  struct stat st;
+  struct dirent de;
+  if ((fd = open(path, 0)) < 0 ) {
+    fprintf(2, "find: cannot open %s\n", path);
+	return;
+  }
+  if (fstat(fd, &st) < 0) {
+    fprintf(2, "find: cannot stat %s\n", path);
+	close(fd);
+	return;
+  }
+
+  switch(st.type) {
+  //DFS
+  case T_FILE:
+	if (strcmp(fmtname(path), fileName) == 0) {
+	  printf("%s\n", path);
+	}
+	break;
+  case T_DIR:
+	if(strlen(path) + 1 + DIRSIZ + 1 > sizeof buf) {
+	  printf("find: path too long\n");
+	  break;
+	}
+	strcpy(buf, path);
+	p = buf + strlen(buf);
+	*p++ = '/';
+	while (read(fd, &de, sizeof(de)) == sizeof(de)) {
+	  if (de.inum == 0 || strcmp(de.name, ".") == 0 || strcmp(de.name, "..") == 0) {
+		continue;
+	  }
+	  memmove(p, de.name, DIRSIZ);
+	  p[DIRSIZ] = 0;
+	  //DFS recursive
+	  find(buf, fileName);
+	}
+	break;
+  }
+  close(fd);
+}
+
+int main(int argc, char *argv[]) {
+  if (argc < 3) {
+    fprintf(2, "Please use it by: find sp sp\n");
+    exit(1);
+  }
+  find(argv[1], argv[2]);
+  exit(0);
+}
diff --git a/user/pingpong.c b/user/pingpong.c
new file mode 100644
index 0000000..c0bf65e
--- /dev/null
+++ b/user/pingpong.c
@@ -0,0 +1,47 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int main(int argc, char *argv[]) {
+  if (argc != 1)
+  {
+	fprintf(2, "Please use it by: pingpong\n");
+	exit(1);
+  }
+  int p1[2], p2[2];  
+  char buffer[] = {'a'};
+  int len = sizeof(buffer);
+  pipe(p1);
+  pipe(p2);
+  if (fork() == 0) {
+        //0 -> child	
+	if (read(p1[0], buffer, len) != len) {
+	  printf("child read error!\n");
+	  exit(1);
+	}
+	printf("%d: received ping\n", getpid());
+	close(p1[1]);
+	if (write(p2[1], buffer, len) != len) {
+	  printf("child write error\n");
+	  exit(1);
+	}
+	close(p2[0]);
+	exit(0);
+  } else {
+        //!0 -> parent
+	if (write(p1[1], buffer, len) != len) {
+	  printf("parent write error!\n");
+	  exit(1);
+	}
+	close(p1[0]);
+	if (read(p2[0], buffer, len) != len) {
+	  printf("parent read error!\n");
+	  exit(1);
+	}
+        close(p2[1]);
+	printf("%d: received pong\n");
+	exit(0);
+  }
+  exit(0);
+}
+
diff --git a/user/primes.c b/user/primes.c
new file mode 100644
index 0000000..10c746d
--- /dev/null
+++ b/user/primes.c
@@ -0,0 +1,52 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+void printPrime(int *input, int count)
+{
+  if (count == 0) {
+    return;
+  }
+  int p[2], i, prime = *input;
+  pipe(p);
+  char buff[4];
+  printf("prime %d\n", prime);
+  if (fork() == 0) {
+        //0 -> child, read from left and write to right 
+	close(p[0]);
+	for (i = 0; i < count; i++) {
+	  write(p[1], (char *)(input + i), 4);
+	}
+	close(p[1]);
+	exit(0);
+  } else {
+        //!0 -> parent, read from left
+	close(p[1]);
+	count = 0;
+	while (read(p[0], buff, 4) != 0) {
+	  int temp = *((int *)buff);
+	  if (temp % prime) {
+	    *input++ = temp;
+		count++;
+	  }
+	}
+	printPrime(input - count, count);
+	close(p[0]);
+	wait(0);
+  }
+}
+
+int main(int argc, char *argv[]) 
+{
+  if (argc != 1)
+  {
+    fprintf(2, "Please use it by: primes\n");
+    exit(1);	
+  }
+  int input[34];
+  for (int i = 0; i < 34; i++) {
+    input[i] = i + 2;
+  }
+  printPrime(input, 34);
+  exit(0);
+}
diff --git a/user/sleep.c b/user/sleep.c
new file mode 100644
index 0000000..a897cd8
--- /dev/null
+++ b/user/sleep.c
@@ -0,0 +1,15 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int main(int argc, char *argv[])
+{
+  if (argc < 2)
+  {
+	fprintf(2, "Please use it by: sleep sometime\n");
+	exit(1);
+  }
+  int time = atoi(argv[1]);
+  sleep(time);
+  exit(0);
+}
diff --git a/user/xargs.c b/user/xargs.c
new file mode 100644
index 0000000..4b9ff17
--- /dev/null
+++ b/user/xargs.c
@@ -0,0 +1,36 @@
+#include "kernel/types.h"
+#include "user/user.h"
+#include "kernel/param.h"
+
+int main(int argc, char *argv[]) {
+  int i, count = 0, k, m = 0;
+  char* lineSplit[MAXARG], *p;
+  char block[32], buf[32];
+  p = buf;
+  for (i = 1; i < argc; i++) {
+	lineSplit[count++] = argv[i];
+  }
+  while ((k = read(0, block, sizeof(block))) > 0) {
+    for (i = 0; i < k; i++) {
+	  if (block[i] == '\n') {
+		buf[m] = 0;
+		lineSplit[count++] = p;
+		lineSplit[count] = 0;
+		m = 0;
+		p = buf;
+		count = argc - 1;
+		if (fork() == 0) {
+		  exec(argv[1], lineSplit);
+		}
+		wait(0);
+	  } else if (block[i] == ' ') {
+		buf[m++] = 0;
+		lineSplit[count++] = p;
+		p = &buf[m];
+	  } else {
+		buf[m++] = block[i];
+	  }
+	}
+  }
+  exit(0);
+}
