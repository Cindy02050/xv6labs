diff --git a/kernel/e1000.c b/kernel/e1000.c
index 70a2adf..527eaa1 100644
--- a/kernel/e1000.c
+++ b/kernel/e1000.c
@@ -95,26 +95,55 @@ e1000_init(uint32 *xregs)
 int
 e1000_transmit(struct mbuf *m)
 {
-  //
-  // Your code here.
-  //
-  // the mbuf contains an ethernet frame; program it into
-  // the TX descriptor ring so that the e1000 sends it. Stash
-  // a pointer so that it can be freed after sending.
-  //
+  acquire(&e1000_lock);
+
+  uint32 ind = regs[E1000_TDT];
+  struct tx_desc *desc = &tx_ring[ind];
+  if(!(desc->status & E1000_TXD_STAT_DD)) {
+    release(&e1000_lock);
+    return -1;
+  }
   
+  if(tx_mbufs[ind]) {
+    mbuffree(tx_mbufs[ind]);
+    tx_mbufs[ind] = 0;
+  }
+
+  desc->addr = (uint64)m->head;
+  desc->length = m->len;
+  desc->cmd = E1000_TXD_CMD_EOP | E1000_TXD_CMD_RS;
+  tx_mbufs[ind] = m;
+
+  regs[E1000_TDT] = (regs[E1000_TDT] + 1) % TX_RING_SIZE;
+  
+  release(&e1000_lock);
   return 0;
 }
 
 static void
 e1000_recv(void)
 {
-  //
-  // Your code here.
-  //
-  // Check for packets that have arrived from the e1000
-  // Create and deliver an mbuf for each packet (using net_rx()).
-  //
+
+  while(1) {
+
+    uint32 ind = (regs[E1000_RDT] + 1) % RX_RING_SIZE;
+    struct rx_desc *desc = &rx_ring[ind];
+    if(!(desc->status & E1000_RXD_STAT_DD)) {
+      return;
+    }
+
+    rx_mbufs[ind]->len = desc->length;
+    
+    net_rx(rx_mbufs[ind]);
+
+    rx_mbufs[ind] = mbufalloc(0);
+
+    desc->addr = (uint64)rx_mbufs[ind]->head;
+    desc->status = 0;
+
+    regs[E1000_RDT] = ind;
+  }
+
 }
 
 void
diff --git a/packets.pcap b/packets.pcap
deleted file mode 100644
index 82d353e..0000000
Binary files a/packets.pcap and /dev/null differ
diff --git a/time.txt b/time.txt
new file mode 100644
index 0000000..0cfbf08
--- /dev/null
+++ b/time.txt
@@ -0,0 +1 @@
+2
