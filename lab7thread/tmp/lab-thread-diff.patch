diff --git a/answers-thread.txt b/answers-thread.txt
new file mode 100644
index 0000000..396bb62
--- /dev/null
+++ b/answers-thread.txt
@@ -0,0 +1 @@
+因为多个线程在同时工作，当其中一个进程给哈希表填入一个键的时候其他进程也可能在添加键，当两个哈希值不相等时插入成功，但两个哈希值相同时会导致后写的覆盖前一个一个，导致键的丢失。因此需要保证同时只能有一个进程访问哈希表，也就是给它加锁。
diff --git a/notxv6/barrier.c b/notxv6/barrier.c
index 12793e8..ef39943 100644
--- a/notxv6/barrier.c
+++ b/notxv6/barrier.c
@@ -25,12 +25,15 @@ barrier_init(void)
 static void 
 barrier()
 {
-  // YOUR CODE HERE
-  //
-  // Block until all threads have called barrier() and
-  // then increment bstate.round.
-  //
-  
+  pthread_mutex_lock(&bstate.barrier_mutex);
+  if(++bstate.nthread < nthread) {
+    pthread_cond_wait(&bstate.barrier_cond, &bstate.barrier_mutex);
+  } else {
+    bstate.nthread = 0;
+    bstate.round++;
+    pthread_cond_broadcast(&bstate.barrier_cond);
+  }
+  pthread_mutex_unlock(&bstate.barrier_mutex);
 }
 
 static void *
diff --git a/notxv6/ph.c b/notxv6/ph.c
index 6df1500..f0c1f90 100644
--- a/notxv6/ph.c
+++ b/notxv6/ph.c
@@ -14,6 +14,7 @@ struct entry {
   struct entry *next;
 };
 struct entry *table[NBUCKET];
+pthread_mutex_t locks[NBUCKET];
 int keys[NKEYS];
 int nthread = 1;
 
@@ -40,6 +41,7 @@ void put(int key, int value)
 {
   int i = key % NBUCKET;
 
+  pthread_mutex_lock(&locks[i]);
   // is the key already present?
   struct entry *e = 0;
   for (e = table[i]; e != 0; e = e->next) {
@@ -53,6 +55,7 @@ void put(int key, int value)
     // the new is new.
     insert(key, value, &table[i], table[i]);
   }
+  pthread_mutex_unlock(&locks[i]);
 }
 
 static struct entry*
@@ -60,11 +63,12 @@ get(int key)
 {
   int i = key % NBUCKET;
 
-
+  pthread_mutex_lock(&locks[i]);
   struct entry *e = 0;
   for (e = table[i]; e != 0; e = e->next) {
     if (e->key == key) break;
   }
+  pthread_mutex_unlock(&locks[i]);
 
   return e;
 }
@@ -114,6 +118,10 @@ main(int argc, char *argv[])
   for (int i = 0; i < NKEYS; i++) {
     keys[i] = random();
   }
+  
+  for(int i=0;i<NBUCKET;i++) {
+    pthread_mutex_init(&locks[i], NULL); 
+  }
 
   //
   // first the puts
diff --git a/time.txt b/time.txt
new file mode 100644
index 0000000..b8626c4
--- /dev/null
+++ b/time.txt
@@ -0,0 +1 @@
+4
diff --git a/user/uthread.c b/user/uthread.c
index 8e46826..e2b5ec6 100644
--- a/user/uthread.c
+++ b/user/uthread.c
@@ -10,16 +10,35 @@
 #define STACK_SIZE  8192
 #define MAX_THREAD  4
 
+// Saved registers for thread context switches.
+struct context {
+  uint64 ra;
+  uint64 sp;
+
+  // callee-saved
+  uint64 s0;
+  uint64 s1;
+  uint64 s2;
+  uint64 s3;
+  uint64 s4;
+  uint64 s5;
+  uint64 s6;
+  uint64 s7;
+  uint64 s8;
+  uint64 s9;
+  uint64 s10;
+  uint64 s11;
+};
 
 struct thread {
   char       stack[STACK_SIZE]; /* the thread's stack */
   int        state;             /* FREE, RUNNING, RUNNABLE */
-
+  struct context ctx;
 };
 struct thread all_thread[MAX_THREAD];
 struct thread *current_thread;
-extern void thread_switch(uint64, uint64);
-              
+extern void thread_switch(struct context* old, struct context* new);
+
 void 
 thread_init(void)
 {
@@ -55,14 +74,11 @@ thread_schedule(void)
     exit(-1);
   }
 
-  if (current_thread != next_thread) {         /* switch threads?  */
+  if (current_thread != next_thread) {         
     next_thread->state = RUNNING;
     t = current_thread;
     current_thread = next_thread;
-    /* YOUR CODE HERE
-     * Invoke thread_switch to switch from t to next_thread:
-     * thread_switch(??, ??);
-     */
+    thread_switch(&t->ctx, &next_thread->ctx);
   } else
     next_thread = 0;
 }
@@ -76,7 +92,11 @@ thread_create(void (*func)())
     if (t->state == FREE) break;
   }
   t->state = RUNNABLE;
-  // YOUR CODE HERE
+  t->ctx.ra = (uint64)func;       // return address
+  // thread_switch will return to ra, thus running the thread
+  t->ctx.sp = (uint64)&t->stack + (STACK_SIZE - 1);  // stack pointer
+  // set thread's stack pointer to it's own stack, notice that stack grows from high address to low address
+  // so it starts from the highest address of t->stack;
 }
 
 void 
diff --git a/user/uthread_switch.S b/user/uthread_switch.S
index 5defb12..f912a0d 100644
--- a/user/uthread_switch.S
+++ b/user/uthread_switch.S
@@ -1,11 +1,45 @@
 	.text
 
 	/*
-         * save the old thread's registers,
-         * restore the new thread's registers.
-         */
+		 * save the old thread's registers,
+		 * restore the new thread's registers.
+		 */
 
+// context switches will always be on function call barriers, so it's not necessary to save caller-saved registers.
+// trapframe on the other hand, must save all registers since it can happen anywhere during the execution of function,
+// not only on function call barriers.
+
+// void thread_switch(struct context *old, struct context *new);
 	.globl thread_switch
 thread_switch:
-	/* YOUR CODE HERE */
+	sd ra, 0(a0)
+	sd sp, 8(a0)
+	sd s0, 16(a0)
+	sd s1, 24(a0)
+	sd s2, 32(a0)
+	sd s3, 40(a0)
+	sd s4, 48(a0)
+	sd s5, 56(a0)
+	sd s6, 64(a0)
+	sd s7, 72(a0)
+	sd s8, 80(a0)
+	sd s9, 88(a0)
+	sd s10, 96(a0)
+	sd s11, 104(a0)
+
+	ld ra, 0(a1)
+	ld sp, 8(a1)
+	ld s0, 16(a1)
+	ld s1, 24(a1)
+	ld s2, 32(a1)
+	ld s3, 40(a1)
+	ld s4, 48(a1)
+	ld s5, 56(a1)
+	ld s6, 64(a1)
+	ld s7, 72(a1)
+	ld s8, 80(a1)
+	ld s9, 88(a1)
+	ld s10, 96(a1)
+	ld s11, 104(a1)
+
 	ret    /* return to ra */
